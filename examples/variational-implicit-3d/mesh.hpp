#include <Eigen/Core>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>

template <int N> struct Mesh
{
    using ElemList = Eigen::Matrix<std::int32_t, N + 1, Eigen::Dynamic>;

    ElemList elems;

    Eigen::VectorXd x_rest;
    Eigen::VectorXd x;
    Eigen::VectorXd v;
    Eigen::VectorXd f;

    double mass = 1.0;

    /// \details Should be precomputed
    Eigen::VectorXd lumped_mass;

    /// \details Should be precomputed
    std::vector<double> volume_array;

    /// \details Should be precomputed
    std::vector<Eigen::Matrix<double, N, N>> rest_shape_mat_inv_array;

    /// \details Should be precomputed
    std::vector<Eigen::Matrix<double, N * N, N*(N + 1)>> vec_PFPx_array;
};

using TetraMesh = Mesh<3>;

/// \brief Read a tetrahedral mesh from a ".mesh" file
///
/// \details Currently, this function is only tested with the data generated by fTetWild:
/// https://github.com/wildmeshing/fTetWild
TetraMesh ReadTetraMesh(const std::string& path)
{
    TetraMesh mesh;

    std::ifstream file(path.c_str());
    std::string   line;

    // Detect the vertices block
    while (std::getline(file, line))
    {
        if (line == "Vertices")
        {
            break;
        }
    }
    std::getline(file, line);

    // Read the number of vertices
    const int num_verts = std::stoi(line);

    // Allocate the vertex data
    mesh.x_rest.resize(num_verts * 3);

    // Read the vertex data
    std::size_t vert_index = 0;
    while (std::getline(file, line))
    {
        if (line == "Triangles")
        {
            break;
        }

        std::istringstream iss(line);

        double x, y, z, zero;
        if (!(iss >> x >> y >> z >> zero))
        {
            assert(false);
        }

        mesh.x_rest.segment<3>(vert_index * 3) = Eigen::Vector3d(x, y, z);

        ++vert_index;
    }

    // This line reads the number of triangles, which should be zero
    std::getline(file, line);

    // Detect the tetrahedra block
    while (std::getline(file, line))
    {
        if (line == "Tetrahedra")
        {
            break;
        }
    }
    std::getline(file, line);

    // Read the number of elements
    const int num_elems = std::stoi(line);

    // Allocate the element data
    mesh.elems.resize(4, num_elems);

    // Read the element data
    std::size_t elem_index = 0;
    while (std::getline(file, line))
    {
        std::istringstream iss(line);

        int e0, e1, e2, e3, zero;
        if (!(iss >> e0 >> e1 >> e2 >> e3 >> zero))
        {
            break;
        }

        // Note: the indices in .mesh files start from "1", not "0"
        mesh.elems(0, elem_index) = e0 - 1;
        mesh.elems(1, elem_index) = e1 - 1;
        mesh.elems(2, elem_index) = e2 - 1;
        mesh.elems(3, elem_index) = e3 - 1;

        ++elem_index;
    }

    // Initialize other values
    mesh.x = mesh.x_rest;
    mesh.v = Eigen::VectorXd::Zero(3 * num_verts);
    mesh.f = Eigen::VectorXd::Zero(3 * num_verts);

    return mesh;
}
